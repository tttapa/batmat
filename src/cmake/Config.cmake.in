@PACKAGE_INIT@

include(CMakeFindDependencyMacro)

set(KOQKATOO_AVAILABLE_COMPONENTS "Core")
# Always require "Core"
list(PREPEND koqkatoo_FIND_COMPONENTS "Core")
if (koqkatoo_FIND_REQUIRED)
    set(koqkatoo_FIND_Core_REQUIRED True)
endif()

set(KOQKATOO_FIND_QUIET_ARG)
if(koqkatoo_FIND_QUIETLY)
    set(KOQKATOO_FIND_QUIET_ARG QUIET)
endif()

foreach(COMP IN LISTS koqkatoo_FIND_COMPONENTS)
    if (NOT COMP IN_LIST KOQKATOO_AVAILABLE_COMPONENTS)
        set(koqkatoo_NOT_FOUND_MESSAGE "Invalid component: ${COMP}")
        set(koqkatoo_FOUND False)
        return()
    endif()
    set(KOQKATOO_FIND_REQUIRED_ARG)
    if(koqkatoo_FIND_REQUIRED_${COMP})
        set(KOQKATOO_FIND_REQUIRED_ARG REQUIRED)
    endif()
    set(koqkatoo${COMP}_ROOT ${CMAKE_CURRENT_LIST_DIR})
    find_package(koqkatoo${COMP}
        ${KOQKATOO_FIND_QUIET_ARG} ${KOQKATOO_FIND_REQUIRED_ARG})
    if (NOT koqkatoo${COMP}_FOUND AND koqkatoo_FIND_REQUIRED_${COMP})
        set(koqkatoo_NOT_FOUND_MESSAGE "Missing required components: ${COMP} (find_package(koqkatoo${COMP}) failed)")
        set(koqkatoo_FOUND False)
        return()
    endif()
    set(koqkatoo_${COMP}_FOUND ${koqkatoo${COMP}_FOUND})
endforeach()

if (koqkatoo_Core_FOUND AND NOT _@PROJECT_NAME@_PRINTED AND "Core" IN_LIST koqkatoo_FIND_COMPONENTS)
    get_target_property(KOQKATOO_CONFIGS koqkatoo::koqkatoo IMPORTED_CONFIGURATIONS)
    message(STATUS "Found @PROJECT_NAME@ @PROJECT_VERSION@: ${CMAKE_CURRENT_LIST_DIR} (available configs: ${KOQKATOO_CONFIGS}, installed components: @KOQKATOO_OPTIONAL_COMPONENTS@, installed targets: @KOQKATOO_INSTALL_TARGETS@)")
    set(_@PROJECT_NAME@_PRINTED On CACHE INTERNAL "")
endif()

check_required_components(koqkatoo)
