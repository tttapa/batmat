@PACKAGE_INIT@

include(CMakeFindDependencyMacro)

set(BATMAT_AVAILABLE_COMPONENTS "Core")
# Always require "Core"
list(PREPEND batmat_FIND_COMPONENTS "Core")
if (batmat_FIND_REQUIRED)
    set(batmat_FIND_Core_REQUIRED True)
endif()

set(BATMAT_FIND_QUIET_ARG)
if(batmat_FIND_QUIETLY)
    set(BATMAT_FIND_QUIET_ARG QUIET)
endif()

foreach(COMP IN LISTS batmat_FIND_COMPONENTS)
    if (NOT COMP IN_LIST BATMAT_AVAILABLE_COMPONENTS)
        set(batmat_NOT_FOUND_MESSAGE "Invalid component: ${COMP}")
        set(batmat_FOUND False)
        return()
    endif()
    set(BATMAT_FIND_REQUIRED_ARG)
    if(batmat_FIND_REQUIRED_${COMP})
        set(BATMAT_FIND_REQUIRED_ARG REQUIRED)
    endif()
    set(batmat${COMP}_ROOT ${CMAKE_CURRENT_LIST_DIR})
    find_package(batmat${COMP}
        ${BATMAT_FIND_QUIET_ARG} ${BATMAT_FIND_REQUIRED_ARG})
    if (NOT batmat${COMP}_FOUND AND batmat_FIND_REQUIRED_${COMP})
        set(batmat_NOT_FOUND_MESSAGE "Missing required components: ${COMP} (find_package(batmat${COMP}) failed)")
        set(batmat_FOUND False)
        return()
    endif()
    set(batmat_${COMP}_FOUND ${batmat${COMP}_FOUND})
endforeach()

if (batmat_Core_FOUND AND NOT _@PROJECT_NAME@_PRINTED AND "Core" IN_LIST batmat_FIND_COMPONENTS)
    get_target_property(BATMAT_CONFIGS batmat::batmat IMPORTED_CONFIGURATIONS)
    message(STATUS "Found @PROJECT_NAME@ @PROJECT_VERSION@: ${CMAKE_CURRENT_LIST_DIR} (available configs: ${BATMAT_CONFIGS}, installed components: @BATMAT_OPTIONAL_COMPONENTS@, installed targets: @BATMAT_INSTALL_TARGETS@)")
    set(_@PROJECT_NAME@_PRINTED On CACHE INTERNAL "")
endif()

check_required_components(batmat)
