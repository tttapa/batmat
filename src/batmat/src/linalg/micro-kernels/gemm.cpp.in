#ifdef __clang__
#pragma clang fp contract(fast)
#endif

#include <batmat/linalg/micro-kernels/gemm.tpp>

namespace batmat::linalg::micro_kernels::gemm {

// clang-format off
using Abi   = std::experimental::simd_abi::@Abi@;
using DType = @DType@;
static constexpr bool Negate = @Negate@;
// clang-format on

using enum StorageOrder;
using enum MatrixStructure;

template <StorageOrder O>
using CStorageOrder = std::integral_constant<StorageOrder, O>;
template <MatrixStructure O>
using CMatrixStructure = std::integral_constant<MatrixStructure, O>;

constexpr std::array ColRowMajor{ColMajor, RowMajor};
constexpr std::array Triangular{LowerTriangular, UpperTriangular};

namespace {
template <auto V>
const auto wrap = V;
} // namespace

extern const auto gemm_copy_register_inst_gemm =
    guanaqo::make_lut<ColRowMajor, ColRowMajor, ColRowMajor>(
        []<auto OA, auto OB, auto OC>(CStorageOrder<OA>, CStorageOrder<OB>,
                                      CStorageOrder<OC>) -> const void * {
            constexpr KernelConfig Conf{.negate = Negate};
            return &wrap<gemm_copy_register<DType, Abi, Conf, OA, OB, OC, OC>>;
        });
extern const auto gemm_copy_register_inst_gemm_sA =
    guanaqo::make_lut<ColRowMajor, ColRowMajor, ColRowMajor, 2>(
        []<auto OA, auto OB, auto OC>(CStorageOrder<OA>, CStorageOrder<OB>, CStorageOrder<OC>,
                                      auto S) -> const void * {
            constexpr KernelConfig Conf{.negate = Negate, .shift_A = S ? 1 : -1};
            return &wrap<gemm_copy_register<DType, Abi, Conf, OA, OB, OC, OC>>;
        });
extern const auto gemm_copy_register_inst_gemm_sB =
    guanaqo::make_lut<ColRowMajor, ColRowMajor, ColRowMajor, 2>(
        []<auto OA, auto OB, auto OC>(CStorageOrder<OA>, CStorageOrder<OB>, CStorageOrder<OC>,
                                      auto S) -> const void * {
            constexpr KernelConfig Conf{.negate = Negate, .shift_B = S ? 1 : -1};
            return &wrap<gemm_copy_register<DType, Abi, Conf, OA, OB, OC, OC>>;
        });
extern const auto gemm_copy_register_inst_gemm_sC =
    guanaqo::make_lut<ColRowMajor, ColRowMajor, ColRowMajor, 2, 2>(
        []<auto OA, auto OB, auto OC>(CStorageOrder<OA>, CStorageOrder<OB>, CStorageOrder<OC>,
                                      auto S, auto M) -> const void * {
            constexpr int sC = S ? 1 : -1;
            constexpr KernelConfig Conf{
                .negate = Negate, .rotate_C = sC, .rotate_D = sC, .mask_D = M ? sC : 0};
            return &wrap<gemm_copy_register<DType, Abi, Conf, OA, OB, OC, OC>>;
        });
extern const auto gemm_copy_register_inst_trmm_A =
    guanaqo::make_lut<ColRowMajor, ColRowMajor, ColRowMajor, Triangular>(
        []<auto OA, auto OB, auto OC, auto SA>(CStorageOrder<OA>, CStorageOrder<OB>,
                                               CStorageOrder<OC>,
                                               CMatrixStructure<SA>) -> const void * {
            constexpr KernelConfig Conf{.negate = Negate, .struc_A = SA};
            return &wrap<gemm_copy_register<DType, Abi, Conf, OA, OB, OC, OC>>;
        });
extern const auto gemm_copy_register_inst_trmm_B =
    guanaqo::make_lut<ColRowMajor, ColRowMajor, ColRowMajor, Triangular>(
        []<auto OA, auto OB, auto OC, auto SB>(CStorageOrder<OA>, CStorageOrder<OB>,
                                               CStorageOrder<OC>,
                                               CMatrixStructure<SB>) -> const void * {
            constexpr KernelConfig Conf{.negate = Negate, .struc_B = SB};
            return &wrap<gemm_copy_register<DType, Abi, Conf, OA, OB, OC, OC>>;
        });
extern const auto gemm_copy_register_inst_trtrtr =
    guanaqo::make_lut<ColRowMajor, ColRowMajor, ColRowMajor, Triangular>(
        []<auto OA, auto OB, auto OC, auto S>(CStorageOrder<OA>, CStorageOrder<OB>,
                                              CStorageOrder<OC>,
                                              CMatrixStructure<S>) -> const void * {
            constexpr KernelConfig Conf{.negate = Negate, .struc_A = S, .struc_B = S, .struc_C = S};
            return &wrap<gemm_copy_register<DType, Abi, Conf, OA, OB, OC, OC>>;
        });
extern const auto gemm_copy_register_inst_syrk_C =
    guanaqo::make_lut<ColRowMajor, ColRowMajor, ColRowMajor, Triangular>(
        []<auto OA, auto OB, auto OC, auto SC>(CStorageOrder<OA>, CStorageOrder<OB>,
                                               CStorageOrder<OC>,
                                               CMatrixStructure<SC>) -> const void * {
            constexpr KernelConfig Conf{.negate = Negate, .struc_C = SC};
            return &wrap<gemm_copy_register<DType, Abi, Conf, OA, OB, OC, OC>>;
        });
extern const auto gemm_copy_register_inst_trtrsyrk_ =
    guanaqo::make_lut<ColRowMajor, ColRowMajor, ColRowMajor>(
        []<auto OA, auto OB, auto OC>(CStorageOrder<OA>, CStorageOrder<OB>,
                                      CStorageOrder<OC>) -> const void * {
            constexpr KernelConfig Conf{.negate  = Negate,
                                        .struc_A = UpperTriangular,
                                        .struc_B = LowerTriangular,
                                        .struc_C = LowerTriangular};
            return &wrap<gemm_copy_register<DType, Abi, Conf, OA, OB, OC, OC>>;
        });

} // namespace batmat::linalg::micro_kernels::gemm
