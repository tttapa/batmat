#ifdef __clang__
#pragma clang fp contract(fast)
#endif

#include <batmat/linalg/micro-kernels/trsm.tpp>

namespace batmat::linalg::micro_kernels::trsm::@DType@_@VL@ {

// clang-format off
using DType = @DType@;
using Abi   = datapar::deduced_abi<DType, @VL@>;
// clang-format on

using enum StorageOrder;
using enum MatrixStructure;

template <StorageOrder O>
using CStorageOrder = std::integral_constant<StorageOrder, O>;
template <MatrixStructure O>
using CMatrixStructure = std::integral_constant<MatrixStructure, O>;

constexpr std::array ColRowMajor{ColMajor, RowMajor};
constexpr std::array Triangular{LowerTriangular, UpperTriangular};

namespace {
template <auto V>
const auto wrap = V;
} // namespace

extern const auto trsm_copy_register_inst =
    guanaqo::make_lut<ColRowMajor, ColRowMajor, ColRowMajor, Triangular>(
        []<auto OA, auto OB, auto OC, auto SA>(CStorageOrder<OA>, CStorageOrder<OB>,
                                               CStorageOrder<OC>,
                                               CMatrixStructure<SA>) -> const void * {
            constexpr KernelConfig Conf{.struc_A = SA};
            return &wrap<trsm_copy_register<DType, Abi, Conf, OA, OB, OC>>;
        });

} // namespace batmat::linalg::micro_kernels::trsm
