#ifdef __clang__
#pragma clang fp contract(fast)
#endif

#include <batmat/linalg/micro-kernels/potrf.tpp>

namespace batmat::linalg::micro_kernels::potrf::@DType@_@VL@_@Negate@ {

// clang-format off
using DType = @DType@;
using Abi   = datapar::deduced_abi<DType, @VL@>;
static constexpr bool Negate = @Negate@;
// clang-format on

using enum StorageOrder;
using enum MatrixStructure;

template <StorageOrder O>
using CStorageOrder = std::integral_constant<StorageOrder, O>;
template <MatrixStructure O>
using CMatrixStructure = std::integral_constant<MatrixStructure, O>;

constexpr std::array ColRowMajor{ColMajor, RowMajor};
constexpr std::array Triangular{LowerTriangular, /* UpperTriangular */}; // TODO

namespace {
template <auto V>
const auto wrap = V;
}

extern const auto potrf_copy_register_inst =
    guanaqo::make_lut<ColRowMajor, ColRowMajor, Triangular>(
        []<auto OA, auto OC, auto SC>(CStorageOrder<OA>, CStorageOrder<OC>,
                                      CMatrixStructure<SC>) -> const void * {
            constexpr KernelConfig Conf{.negate_A = Negate, .struc_C = SC};
            return &wrap<potrf_copy_register<DType, Abi, Conf, OA, OC>>;
        });

} // namespace batmat::linalg::micro_kernels::potrf
