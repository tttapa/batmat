#ifdef __clang__
#pragma clang fp contract(fast)
#endif

#include <batmat/linalg/micro-kernels/syomv.tpp>

// clang-format off
namespace batmat::linalg::micro_kernels::syomv::@DType@_@VL@_@Negate@ {
using DType = @DType@;
using Abi   = datapar::deduced_abi<DType, @VL@>;
static constexpr bool Negate = @Negate@;
// clang-format on

using enum StorageOrder;

template <StorageOrder O>
using CStorageOrder = std::integral_constant<StorageOrder, O>;

constexpr std::array ColRowMajor{ColMajor, RowMajor};

namespace {
template <auto V>
const auto wrap = V;
} // namespace

extern const auto syomv_register_inst =
    guanaqo::make_lut<ColRowMajor>([]<auto OA>(CStorageOrder<OA>) -> const void * {
        constexpr KernelConfig Conf{.negate = Negate};
        constexpr auto CM = StorageOrder::ColMajor;
        return &wrap<syomv_register<DType, Abi, Conf, OA, CM, CM>>;
    });

} // namespace batmat::linalg::micro_kernels::syomv
