#ifdef __clang__
#pragma clang fp contract(fast)
#endif

#include <koqkatoo/linalg-compact/compact/micro-kernels/xgemm-diag.tpp>

namespace koqkatoo::linalg::compact::micro_kernels::gemm {

using Abi = stdx::simd_abi::@simd_abi@;

template const constinit decltype(microkernel_diag_lut<Abi, {}>) microkernel_diag_lut<Abi, {}>;
template const constinit decltype(microkernel_diag_lut<Abi, {.trans_A = true}>) microkernel_diag_lut<Abi, {.trans_A = true}>;
template const constinit decltype(microkernel_diag_lut<Abi, {.trans_B = true}>) microkernel_diag_lut<Abi, {.trans_B = true}>;
template const constinit decltype(microkernel_diag_lut<Abi, {.trans_A = true, .trans_B = true}>) microkernel_diag_lut<Abi, {.trans_A = true, .trans_B = true}>;
template const constinit decltype(microkernel_diag_lut<Abi, {.negate = true}>) microkernel_diag_lut<Abi, {.negate = true}>;
template const constinit decltype(microkernel_diag_lut<Abi, {.negate = true, .trans_A = true}>) microkernel_diag_lut<Abi, {.negate = true, .trans_A = true}>;
template const constinit decltype(microkernel_diag_lut<Abi, {.negate = true, .trans_B = true}>) microkernel_diag_lut<Abi, {.negate = true, .trans_B = true}>;
template const constinit decltype(microkernel_diag_lut<Abi, {.negate = true, .trans_A = true, .trans_B = true}>) microkernel_diag_lut<Abi, {.negate = true, .trans_A = true, .trans_B = true}>;
template const constinit decltype(microkernel_diag_copy_lut<Abi, {.trans_B = true}>) microkernel_diag_copy_lut<Abi, {.trans_B = true}>;

template void xgemm_diag_register<Abi, {.trans_B = true}>(
    single_batch_view<Abi>, single_batch_view<Abi>, mut_single_batch_view<Abi>, single_batch_view<Abi>);

}
